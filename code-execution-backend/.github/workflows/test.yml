name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  DOCKER_HOST: ''

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci

    - name: Run unit tests
      run: |
        node test/scripts/run-tests.js --type unit --format junit --coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unit
        name: unit-coverage
        fail_ci_if_error: false

    - name: Archive test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: |
          coverage/
          junit.xml

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci

    - name: Run integration tests
      run: |
        node test/scripts/run-tests.js --type integration --format junit --timeout 60000

    - name: Archive test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: |
          junit.xml

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci

    - name: Run performance tests
      run: |
        node test/scripts/run-tests.js --type performance --format junit --timeout 120000

    - name: Archive performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: |
          junit.xml

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci

    - name: Run security audit
      run: |
        npm audit --audit-level=moderate

    - name: Run lint security rules
      run: |
        npm install -g eslint
        eslint --ext .js src/ --rule 'security/*: error'

  docker-tests:
    name: Docker Integration Tests
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:24-dind
        options: --privileged
        ports:
          - 2375:2375

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci

    - name: Build Docker images
      run: |
        npm run docker:build

    - name: Run Docker integration tests
      run: |
        DOCKER_HOST=tcp://localhost:2375 \
        node test/scripts/run-tests.js --type integration --format junit
      env:
        DOCKER_HOST: tcp://localhost:2375

    - name: Archive Docker test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: docker-test-results
        path: |
          junit.xml

  test-results:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, security-tests]
    if: always()

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test Results
        path: '**/junit.xml'
        reporter: java-junit

  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [unit-tests]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download coverage artifacts
      uses: actions/download-artifact@v4
      with:
        name: unit-test-results
        path: coverage/

    - name: Generate coverage summary
      run: |
        if [ -f "coverage/coverage-summary.json" ]; then
          echo "## ðŸ“Š Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          LINES=$(jq -r '.total.lines.pct' coverage/coverage-summary.json)
          FUNCTIONS=$(jq -r '.total.functions.pct' coverage/coverage-summary.json)
          BRANCHES=$(jq -r '.total.branches.pct' coverage/coverage-summary.json)
          STATEMENTS=$(jq -r '.total.statements.pct' coverage/coverage-summary.json)

          echo "| Metric | Coverage |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lines | $LINES% |" >> $GITHUB_STEP_SUMMARY
          echo "| Functions | $FUNCTIONS% |" >> $GITHUB_STEP_SUMMARY
          echo "| Branches | $BRANCHES% |" >> $GITHUB_STEP_SUMMARY
          echo "| Statements | $STATEMENTS% |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false