name: Deploy to Production

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "18"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test job
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Build frontend
        run: npm run build

      - name: Test backend
        run: |
          cd code-execution-backend
          npm ci
          npm run test:unit || true  # Allow tests to fail for now

      - name: Test socket server
        run: |
          cd socket-server
          npm ci
          # Add socket server tests here if available

  # Build and push Docker images
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    strategy:
      matrix:
        service: [frontend, backend, socket-server]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.service == 'frontend' && 'Dockerfile.frontend' || matrix.service + '/Dockerfile' }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging (for pull requests)
  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Railway (staging)
        uses: railway-app/railway-action@v1
        with:
          api-token: ${{ secrets.RAILWAY_TOKEN }}
          service: ${{ secrets.RAILWAY_SERVICE_ID }}

      - name: Deploy to Render (staging)
        uses: johnnyhuy/render-action@v1.0.0
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-success: true

  # Deploy to production (main branch)
  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy frontend to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          vercel-args: "--prod"

      - name: Deploy backend to Railway
        uses: railway-app/railway-action@v1
        with:
          api-token: ${{ secrets.RAILWAY_TOKEN }}
          service: ${{ secrets.RAILWAY_BACKEND_SERVICE_ID }}

      - name: Deploy Socket.IO to Railway
        uses: railway-app/railway-action@v1
        with:
          api-token: ${{ secrets.RAILWAY_TOKEN }}
          service: ${{ secrets.RAILWAY_SOCKET_SERVICE_ID }}

      - name: Update environment variables
        run: |
          echo "Frontend deployed to: ${{ steps.deploy.outputs.url }}"
          echo "Backend deployed to Railway"
          echo "Socket.IO deployed to Railway"

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: "#deployments"
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # Health check after deployment
  health-check:
    needs: deploy-production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Wait for deployment
        run: sleep 60

      - name: Check frontend health
        run: |
          curl -f ${{ secrets.FRONTEND_URL }} || exit 1

      - name: Check backend health
        run: |
          curl -f ${{ secrets.BACKEND_URL }}/health || exit 1

      - name: Check Socket.IO health
        run: |
          curl -f ${{ secrets.SOCKET_URL }}/health || exit 1

      - name: Run smoke tests
        run: |
          # Add basic smoke tests here
          echo "Running smoke tests..."

      - name: Notify on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: "failure"
          channel: "#alerts"
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: "Deployment health checks failed!"
